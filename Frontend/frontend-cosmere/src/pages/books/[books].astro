---
import Layout from "@layouts/Layout.astro";
import SectionInf from "@components/SectionInf.astro";

import { fetchBooks } from "@lib/utils/fetchBooks";
import { fetchBookId } from "@lib/utils/fetchBookId";
import type { Book } from "@lib/utils/fetchBooks";

// Peticion Asincrona de los personajes
export async function getStaticPaths() {
  let characters: Book[] = [];

  try {
    characters = await fetchBooks();
  } catch (error) {
    console.error("Error al obtener personajes:", error);
  }

  if (!characters || characters.length === 0) {
    throw new Error("fetchCharacters() no devolvió datos");
  }

  return characters.map((character: Book) => {
    if (!character.id_Book) {
      throw new Error(
        `El personaje no tiene un ID: ${JSON.stringify(character)}`
      );
    }
    return { params: { books: character.id_Book.toString() } };
  });
}

const id = Number(Astro.params?.books);
if (isNaN(id)) {
  throw new Error(`ID inválido recibido: ${Astro.params?.books}`);
}

let bookObject: Book | null = null;

// Extraer toda la información del libro
try {
  bookObject = await fetchBookId(id);
  console.log(
    "BookID Encontrado!",
    bookObject?.id_Book ?? "No encontrado"
  );
} catch (error) {
  console.error("Error fetching character:", error);
}

const nameCharacter = bookObject
  ? bookObject.name_Book
  : "Unknown Character";
const sagaCharacter = bookObject
  ? bookObject.saga
  : "Unknown SagaCharacter Character";

console.log("Book Object desde [book].astro ", bookObject);

---

<Layout title={nameCharacter} description={sagaCharacter}>
    {bookObject && <SectionInf entity={bookObject}/>} 
</Layout>
